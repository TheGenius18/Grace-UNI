# Generated by Django 4.2.23 on 2025-06-24 00:38

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('country', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('type_of_therapy', models.CharField(choices=[('cbt', 'Cognitive Behavioral Therapy'), ('dbt', 'Dialectical Behavior Therapy'), ('psychodynamic', 'Psychodynamic Therapy'), ('humanistic', 'Humanistic Therapy'), ('other', 'Other')], max_length=50)),
                ('number_of_sessions', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('user_type', models.CharField(choices=[('patient', 'Patient'), ('therapist', 'Therapist')], default='patient', max_length=10)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('is_profile_complete', models.BooleanField(default=False)),
                ('visotype', models.CharField(blank=True, help_text='Account verification status or type', max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('age', models.PositiveIntegerField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('sibling_order', models.CharField(blank=True, choices=[('only', 'Only child'), ('oldest', 'Oldest'), ('middle', 'Middle'), ('youngest', 'Youngest')], max_length=10, null=True)),
                ('diagnosis', models.CharField(blank=True, max_length=100, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Therapist',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('age', models.PositiveIntegerField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=10, null=True)),
                ('motto', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('rank', models.IntegerField(default=0, help_text='Therapist ranking from 0 to 10')),
                ('availability', models.CharField(blank=True, max_length=255)),
                ('education_degree', models.CharField(blank=True, choices=[('bachelors', "Bachelor's"), ('masters', "Master's"), ('phd', 'PhD'), ('md', 'MD'), ('other', 'Other')], max_length=50)),
                ('education_institution', models.CharField(blank=True, max_length=255)),
                ('education_field', models.CharField(blank=True, max_length=255)),
                ('education_year', models.PositiveIntegerField(blank=True, null=True)),
                ('education_verified', models.BooleanField(default=False)),
                ('experience_years', models.PositiveIntegerField(default=0)),
                ('experience_position', models.CharField(blank=True, max_length=255)),
                ('experience_organization', models.CharField(blank=True, max_length=255)),
                ('experience_start_date', models.DateField(blank=True, null=True)),
                ('experience_end_date', models.DateField(blank=True, null=True)),
                ('experience_current', models.BooleanField(default=False)),
                ('experience_description', models.TextField(blank=True)),
                ('specialization_name', models.CharField(blank=True, max_length=100)),
                ('specialization_description', models.TextField(blank=True)),
                ('language_name', models.CharField(blank=True, max_length=50)),
                ('language_proficiency', models.CharField(blank=True, max_length=50, null=True)),
                ('additional_degrees', models.JSONField(blank=True, default=list)),
                ('previous_positions', models.JSONField(blank=True, default=list)),
                ('other_specializations', models.JSONField(blank=True, default=list)),
                ('other_languages', models.JSONField(blank=True, default=list)),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.region')),
            ],
        ),
        migrations.CreateModel(
            name='TreatmentSessionTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('session_number', models.PositiveIntegerField()),
                ('treatment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_topics', to='API.treatmentplan')),
            ],
        ),
        migrations.CreateModel(
            name='TreatmentGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('is_achieved', models.BooleanField(default=False)),
                ('target_date', models.DateField(blank=True, null=True)),
                ('treatment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='API.treatmentplan')),
            ],
        ),
        migrations.CreateModel(
            name='TherapistRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.CharField(blank=True, max_length=255, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to='API.therapist')),
            ],
        ),
        migrations.AddField(
            model_name='treatmentplan',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='API.patient'),
        ),
        migrations.AddField(
            model_name='treatmentplan',
            name='therapist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='API.therapist'),
        ),
        migrations.CreateModel(
            name='TrainingAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='API.training')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_trainings', to='API.patient')),
            ],
        ),
        migrations.AddField(
            model_name='training',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainings', to='API.therapist'),
        ),
        migrations.CreateModel(
            name='TherapistMemo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memos', to='API.therapist')),
            ],
        ),
        migrations.CreateModel(
            name='TherapistFreeTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='free_times', to='API.therapist')),
            ],
        ),
        migrations.AddField(
            model_name='patient',
            name='therapist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients', to='API.therapist'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='API.article')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='API.patient')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='therapist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='API.therapist'),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_number', models.CharField(max_length=50, unique=True)),
                ('scheduled_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='API.patient')),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='API.therapist')),
            ],
            options={
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='TherapistNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('request', 'Therapist Request'), ('appointment', 'Appointment'), ('emergency', 'Emergency'), ('general', 'General')], max_length=20)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_url', models.URLField(blank=True, null=True)),
                ('emergency_title', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_description', models.TextField(blank=True, null=True)),
                ('emergency_acknowledged', models.BooleanField(default=False)),
                ('emergency_acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('emergency_severity', models.PositiveSmallIntegerField(blank=True, help_text='Severity level from 1 (low) to 10 (critical)', null=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.appointment')),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.therapistrequest')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to='API.patient')),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='API.therapist')),
            ],
            options={
                'verbose_name': 'Therapist Notification',
                'verbose_name_plural': 'Therapist Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['therapist', 'is_read'], name='API_therapi_therapi_a5d0f9_idx'), models.Index(fields=['created_at'], name='API_therapi_created_c336d9_idx'), models.Index(fields=['notification_type'], name='API_therapi_notific_c6bd54_idx')],
            },
        ),
    ]
